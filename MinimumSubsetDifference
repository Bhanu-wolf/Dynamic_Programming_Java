import java.util.ArrayList;

public class MinimumSubsetDifference {
    public static void main(String[] args) {
        int[] arr = { 1, 6, 7, 1 };
        System.out.println(minimumSubsetDifference(arr));
    }

    static int minimumSubsetDifference(int[] arr) {
        int sum = 0;
        for (int x : arr)
            sum += x;
        boolean[][] t = subsetSum(arr, sum);
        ArrayList<Integer> list = new ArrayList<>();
        for (int i = arr.length; i < arr.length + 1; i++) {
            for (int j = 0; j <= sum / 2; j++) {
                if (t[i][j] == true)
                    list.add(j);
            }
        }
        int min = Integer.MAX_VALUE, mn = 0;
        for (int i = 0; i < list.size(); i++) {
            mn = Math.min(min, sum - 2 * (list.get(i)));
        }
        return mn;
    }

    static boolean[][] subsetSum(int[] arr, int sum) {
        boolean[][] t = new boolean[arr.length + 1][sum + 1];
        for (int i = 0; i < arr.length + 1; i++) {
            for (int j = 0; j < sum + 1; j++) {
                if (i == 0)
                    t[i][j] = false;
                if (j == 0)
                    t[i][j] = true;
            }
        }
        for (int i = 1; i < arr.length + 1; i++) {
            for (int j = 1; j < sum + 1; j++) {
                if (arr[i - 1] <= j)
                    t[i][j] = t[i - 1][j - arr[i - 1]] || t[i - 1][j];
                else
                    t[i][j] = t[i - 1][j];
            }
        }
        return t;
    }
}
