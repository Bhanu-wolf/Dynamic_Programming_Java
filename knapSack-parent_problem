import java.util.*;
import java.math.*;

public class knapsackParent {
    static int[][] t = new int[5][51];

    public static void main(String[] args) {
        for (int[] row : t)
            Arrays.fill(row, -1);
        int val[] = new int[] { 1, 4, 5, 7 };
        int wt[] = new int[] { 1, 3, 4, 5 };
        System.out.println(knapsack(wt, val, 7, val.length));

    }

    static int knapsack(int[] wt, int[] val, int w, int n) {
        for (int[] row : t)
          Arrays.fill(row, -1);
        if (n == 0 || w == 0)
            return 0;
        if (t[n][w] != -1)
            return t[n][w];
        if (wt[n - 1] <= w)
            return t[n][w] = Math.max(val[n - 1] + knapsack(wt, val, w - wt[n - 1], n - 1),
                    knapsack(wt, val, w, n - 1));
        else if (wt[n - 1] > w)
            return t[n][w] = knapsack(wt, val, w, n - 1);
        return 0;
    }
}
